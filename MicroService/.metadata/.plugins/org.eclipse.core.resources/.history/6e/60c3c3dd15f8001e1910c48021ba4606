package com.arya.OrderService.Service;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.arya.OrderService.DTO.InventoryResponse;
import com.arya.OrderService.DTO.OrderItemDTO;
import com.arya.OrderService.DTO.OrderRequestDTO;
import com.arya.OrderService.Model.Order;
import com.arya.OrderService.Model.OrderItems;
import com.arya.OrderService.Repository.OrderRepository;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
@Transactional
public class orderService {
	final private OrderRepository repo;
	final private WebClient webClient;
	
	public void placeOrder(OrderRequestDTO orderRequest) throws Exception {
		Order order=new Order();
		order.setOrderNumber(UUID.randomUUID().toString());
		
		List<OrderItems> list=orderRequest.getList().stream().map(a->mapToDto(a)).toList();
		order.setOrderitems(list);
		
		List<String> skucodes = list.stream().map(a->a.getSkucode()).toList();
		
		// Verify from the inventory if order is available
		InventoryResponse[] result = webClient.get()
							.uri(uriBuilder -> uriBuilder
			                        .scheme("http")
			                        .host("Inventory-Service") // Service name registered with Eureka
			                        .path("/api/inventory")
			                        .queryParam("skucode", skucodes)
			                        .build())
							.retrieve()
							.bodyToMono(InventoryResponse[].class)
							.block() ;
		boolean allProducts = Arrays.stream(result).allMatch(a->a.getIsInStock());
		
		if(allProducts) {
			repo.save(order);
		}else {
			throw new Exception("Products not available in the Inventory");
		}
		
	}

	private OrderItems mapToDto(OrderItemDTO a) {
		OrderItems orderItems=new OrderItems();
		orderItems.setPrice(a.getPrice());
		orderItems.setQuantity(a.getQuantity());
		orderItems.setSkucode(a.getSkucode());
		return orderItems;
	}
}
